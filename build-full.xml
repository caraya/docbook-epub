<project name="eBook" default="docbook-single" basedir=".">
<description>
	Apache ant build file for Docbook based ebooks
</description>
<!-- Created by Carlos Araya as part of his eBook research -->

<!-- Required for the IF Task -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<!-- Change the value of src_file to the name of your ebook file without extension-->
<property name="src_file" value="docbook-howto"/>

<!-- 
	Change the properties below to the full path of the respective tools on your system. 
	
	This should work on Windows, Mac and Linux since Ant is crossplatform... I hope :-)
-->
<property name="saxon_bin" value="/usr/local/java/saxon.jar"/>
<property name="fop_bin" value="/usr/local/java/fop/build/fop.jar"/>
<property name="epubcheck_bin" value="/usr/local/java/epubcheck/epubcheck-3.0b4.jar"/>
<property name="kindlegen_bin" value="/usr/local/kindlegen/kindlegen"/>
<property name="xsltproc_bin" value="/usr/bin/xsltproc"/>
<property name="xmllint_bin" value="/usr/bin/xmllint"/>

<!-- set global properties for this build -->
<property name="dest"  location="ebook-content"/> 
<property name="css"  location="${dest}/css"/> 
<property name="js"  location="${dest}/js"/> 
<property name="images"  location="${dest}/images"/> 

<target name="init">
	<!-- 
		Create the destination directory and appropriate sub directories
		if they don't exist already
	-->
	<if>
		<available file="${dest}" type="dir" />
		<then>
			<echo message="Directory ${dest} exist... skiping" />
		</then>
		<else>
			<echo>Creating directory</echo>
			<mkdir dir="${dest}"/>
			<echo>Creating CSS directory</echo>
			<mkdir dir="${css}"/>
			<echo>Creating JS directory</echo>
			<mkdir dir="${js}"/>
			<echo>Creating image directory</echo>
			<mkdir dir="${images}"/>
		</else>
	</if>
	<!-- 
		Copy CSS, JS and any images into their directories 
	-->
	<copy todir="${css}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.css"/>
		</fileset>
	</copy>
	<copy todir="${js}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.js"/>
		</fileset>
	</copy>
	<copy todir="${images}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.jpg"/>
		  <include name="*.gif"/>
		  <include name="*.png"/>
		</fileset>
	</copy>
</target>

<target name="docbook-single" depends="init">
	<echo>validate XML before converting to Docbook</echo>
	<antcall target="validate-xml"/>
	<echo>Generating HTML Single File using Saxon and XSLT2.0</echo>
	<echo>Saxon 9 or another XSLT2 processor must be used</echo>
	<java jar="${saxon_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="-s:${src_file}.xml"/>
		<arg value="-xsl:/usr/local/docbook/2.0/release/2.0.3/xslt/base/html/docbook.xsl"/>
		<arg value="-o:${src_file}-2.html"/>
	</java>
	<echo>Moving files to ${dest}</echo>
	<copy todir="${dest}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</copy>
</target>

<target name="docbook-chunks">
	<echo>Generating HTML Chunks</echo>
	<exec executable="${xsltproc_bin}">
		<arg line="/usr/local/docbook/1.0/xslt/xhtml/chunk.xsl ${src_file}.xml"/>
  	</exec>
	<echo>Moving html files to ${dest}</echo>
	<copy todir="${dest}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</copy>
</target>

<target name="docbook-fo">
	<echo>Creating FO file</echo>
	<exec executable="${xsltproc_bin}">
		<arg line="-o ${src_file}.fo /usr/local/docbook/1.0/xslt/fo/docbook.xsl ${src_file}.xml"/>
  	</exec>
</target>

<target name="pdf-fop" depends="docbook-fo">
	<echo>Using fop at ${fop_bin}</echo>
	<java jar="${fop_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg line="${src_file}.fo ${src_file}.pdf"/>
	</java>
</target>

<target name="epub2">
<description>
	Convert the XML file into epub2 using a snapshot of the stylesheets
</description>
<!-- Remove prior versions of the content we're generating -->
<antcall target="epub-clean"/>
<!-- Validate XML -->
<antcall target="validate-xml"/>
<!-- Run the stylesheet conversion -->
<exec executable="${xsltproc_bin}">
	<arg line="${docbook_path}epub/docbook.xsl ${src_file}.xml"/>
</exec>
<!-- Create mimetype file, required per epub spec -->
<antcall target="make-mime"/>
<!-- zips the fills for the epub -->
<antcall target="epub-zip"/>
<!-- Runs epubcheck on the epub file -->
<antcall target="epub-check"/>
<!-- Creates a Kindle version of the book -->
<antcall target="make-kindle"/>
</target>

<target name="epub3">
<!-- Remove prior versions of the content we're generating -->
<antcall target="epub-clean"/>
<!-- Validate XML -->
<antcall target="validate-xml"/>
<!-- Run the xslt transformation... we should be able to use the XSLT ant task but xsltproc is faster -->
<exec executable="${xsltproc_bin}">
	<arg line="--stringparam base.dir OEBPS/ ${docbook_path}epub3/carlos-chunk.xsl ${src_file}.xml"/>
</exec>
<!-- Copy css stylesheet -->
<antcall target="copy-resources"/>
<!-- zips the fils for the epub -->
<antcall target="epub-zip"/>
<!-- Runs epubcheck on the epub file -->
<antcall target="epub-check"/>
</target>

<!-- Utility targets called from elsewhere epub2 and/or epub3 targets-->
<target name="copy-resources">
	<check if the type directory is available -->
	<if>
		<!-- Check if the type directory is available-->
		<available file="type" type="dir" />
		<then>
			<!-- If it is then do this:
			
				1. Make the OEBPS type directory
				2. copy all fonts except those starting with Calluna 
			       to the OEBPS/type directoryexcept those that start with Calluna-->
			<echo message="Directory exist... copying font files" />
			<mkdir dir="OEBPS/type"/>
			 <copy todir="OEBPS/type">
			    <fileset dir="type/">
			      <exclude name="Calluna*.*"/>
			    </fileset>
			  </copy>
		</then>
		<else>
			<!-- There are no fonts... tough luck buddy -->
			<echo message="There are no fonts available" />
		</else>
	</if>	
	<if>
		<available file="${css_file}" type="file" />
		<then>
			<copy file="${css_file}" tofile="OEBPS/${css_file}"/>
		</then>
		<else>
			<echo>No file ${css_file} available!</echo>
		</else>
	</if>
</target>

<target name="make-mime">
<!-- Creates mimetype file as required by epub spec-->
<echo file="mimetype">application/epub+zip</echo>
</target>

<target name="make-kindle">
<exec executable="${kindlegen_bin}">
	<arg line="${src_file}.epub"/>
</exec>
</target>

<target name="epub-zip">
<!-- We use exec zip because I can't figure out if the builtin zip task conforms to what ePub expects -->
<!-- Zip the mimetype first without compression as required-->
<exec executable="zip">
<arg line="-X0 ${src_file}.epub mimetype"/>
</exec>
<!-- Then zip the other files into the zip/epub archive -->
<exec executable="zip">
<arg line="-r -X9 ${src_file}.epub META-INF OEBPS"/>
</exec>
</target>

<target name="epub-check">
<java jar="${epubcheck_bin}" fork="true" failonerror="true" maxmemory="128m">
	<arg value="${src_file}.epub"/>
</java>
</target>

<!-- We call xmllint to make sure that the XML validates-->
<target name="validate-xml">
<exec executable="${xmllint_bin}">
	<arg line="-noent -noout ${src_file}.xml"/>
</exec>
</target>

<target name="copy-videos">
	<copy todir="OEBPS/video">
		<fileset dir="video/">
			<include name="*.mp4"/>
			<include name="*.png"/>
			<include name="*.jpg"/>
		</fileset>
	</copy>
</target>

<target name="all-clean">
	<!-- 
		Calls all the cleanup targets
	-->
	<antcall target="html-clean"/>
	<antcall target="fo-clean"/>
	<antcall target="epub-clean"/>
	<echo>Done deleting files!</echo>
</target>

<target name="html-clean">
	<!-- 
		Cleans up HTML leftovers 
	-->
	<delete verbose="true">
		<fileset dir="." includes="*.html"/>
	</delete>
	<delete dir="${dest}"/>
</target>

<target name="fo-clean">
	<!-- 
		Removes the .fo file leftover from creating the PDF version
	-->
	<delete file="${src_file}.fo"/> 
</target>
</project>