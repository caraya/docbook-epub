<project name="eBook" default="docbook-single" basedir=".">
<description>
	Apache ant build file for Docbook based ebooks
</description>
<!-- Created by Carlos Araya as part of his eBook research -->

<!-- Required for the IF Task -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<!-- Change the value of src_file to the name of your ebook file without extension-->
<property name="src_file" value="docbook-howto"/>

<!-- Put the name of the binaries that you're using that are not stock on OS X-->
<property name="saxon_bin" value="/usr/local/java/saxon.jar"/>
<property name="fop_bin" value="/usr/local/java/fop/build/fop.jar"/>
<property name="epubcheck_bin" value="/usr/local/java/epubcheck/epubcheck-3.0b4.jar"/>
<property name="kindlegen_bin" value="/usr/local/kindlegen/kindlegen"/>

<!-- set global properties for this build -->
<property name="dest"  location="ebook-content"/> 
<property name="css"  location="${dest}/css"/> 
<property name="js"  location="${dest}/js"/> 
<property name="images"  location="${dest}/images"/> 

<target name="init">
	<!-- Create the destination directory and appropriate sub directories-->
	<echo>Creating directory</echo>
	<mkdir dir="${dest}"/>
	<echo>Creating CSS directory</echo>
	<mkdir dir="${css}"/>
	<echo>Creating JS directory</echo>
	<mkdir dir="${js}"/>
	<echo>Creating image directory</echo>
	<mkdir dir="${images}"/>
	<!-- Copy CSS, JS and any images into their directories -->
	<copy todir="${css}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.css"/>
		</fileset>
	</copy>
	<copy todir="${js}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.js"/>
		</fileset>
	</copy>
	<copy todir="${images}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.jpg"/>
		  <include name="*.gif"/>
		  <include name="*.png"/>
		</fileset>
	</copy>
</target>

<target name="docbook-single" depends="init">
	<description>
		Convert to a single HTML 4 using version 2.0 of stylesheet
		we do this to make sure that the file validates as docbook
	</description>

	<echo>Generating HTML Single File using Saxon and XSLT2.0</echo>
	<echo>Saxon 9 or another XSLT2 processor must be used</echo>
	<java jar="${saxon_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="-s:${src_file}.xml"/>
		<arg value="-xsl:/usr/local/docbook/2.0/release/2.0.3/xslt/base/html/docbook.xsl"/>
		<arg value="-o:${src_file}-2.html"/>
	</java>
	<copy todir="${dest}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</copy>
</target>

<target name="docbook-chunks">
	<description>
		Convert to chunks using version 1.76 of stylesheet 
	</description>
	<echo>Generating HTML Chunks</echo>
	<exec executable="xsltproc">
		<arg line="/usr/local/docbook/1.7/xhtml/chunk.xsl ${src_file}.xml"/>
  	</exec>
	<copy todir="${dest}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</copy>
</target>

<target name="docbook-fo">
	<description>
		Convert to FO using version 1.76 of stylesheet
	</description>
	<exec executable="xsltproc">
		<arg line="-o ${src_file}.fo /usr/local/docbook/1.7/xhtml/docbook.xsl ${src_file}.xml"/>
  	</exec>
</target>

<target name="pdf-fop" depends="docbook-fo">
	<echo>Using fop at ${fop_bin}</echo>
	<java jar="${fop_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg line="${src_file}.fo ${src_file}.pdf"/>
	</java>
</target>

<target name="epub2">
	<description>
		Convert the XML file into epub2 using a snapshot of the stylesheets
	</description>
	<!-- Run the stylesheets first -->
	<exec executable="xsltproc">
		<arg line="/usr/local/docbook/1.0/xslt/epub/docbook.xsl ${src_file}.xml"/>
	</exec>
	<!-- Create mimetype file, required per epub spec -->
	<antcall target="make-mime"/>
	<!-- zips the fils for the epub -->
	<antcall target="epub-zip"/>
	<!-- Runs epubcheck on the epub file -->
	<antcall target="epub-check"/>
	<!-- Creates a Kindlegen -->
	<antcall target="make-kindle"/>
</target>

<target name="epub3">
	<description>
		Convert the XML file into epub3 using a snapshot of the stylesheets. 
		We do it with snapshot because epub3 support is still experimental
	</description>
	<exec executable="xsltproc">
		<arg line="--stringparam base.dir OEBPS/ /usr/local/docbook/1.0/xslt/epub3/chunk.xsl ${src_file}.xml"/>
	</exec>
	<!-- copy video resources into OEBPS/video -->
	<copy file="video/do-lectures.mp4" tofile="OEBPS/video/do-lectures.mp4"/>
	<copy file="video/do-lectures.png" tofile="OEBPS/video/do-lectures.png"/>
	<!-- zips the fils for the epub -->
	<antcall target="epub-zip"/>
	<!-- Runs epubcheck on the epub file -->
	<antcall target="epub-check"/>
</target>


<!-- Utility targets called from elsewhere epub2 and epub3 targets-->
<target name="make-mime">
	<!-- Creates mimetype file as required by epub spec-->
	<echo file="mimetype">application/epub+zip</echo>
</target>

<target name="make-kindle">
	<exec executable="${kindlegen_bin}">
		<arg line="${src_file}.epub"/>
	</exec>
</target>

<target name="epub-zip">
<!-- We use exec zip because I can't figure out if the builtin zip task conforms to what ePub expects -->
<!-- Zip the mimetype first without compression as required-->
<exec executable="zip">
	<arg line="-X0 ${src_file}.epub mimetype"/>
</exec>
<!-- Then zip the other files into the zip/epub archive -->
<exec executable="zip">
	<arg line="-r -X9 ${src_file}.epub META-INF OEBPS"/>
</exec>
</target>

<target name="epub-check">
	<java jar="${epubcheck_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="${src_file}.epub"/>
	</java>
</target>

<!-- Calls all the cleanup targets-->
<target name="all-clean">
	<antcall target="html-clean"/>
	<antcall target="fo-clean"/>
	<antcall target="epub-clean"/>
	<echo>Done deleting files!</echo>
</target>

<!-- Cleans up HTML leftovers -->
<target name="html-clean">
	<description>
		Cleans up HTML destination directory 
	</description>
	<delete verbose="true">
		<fileset dir="." includes="*.html"/>
	</delete>
	<delete dir="${dest}"/>
</target>

<!-- Removes the .fo file leftover from creating the PDF version-->
<target name="fo-clean">
	<description>
		Cleans up fo file left after PDF conversion
	</description>
	<delete file="${src_file}.fo"/> 
</target>

<!-- Cleans up leftover epub stuff-->
<target name="epub-clean">
	<description>
		Cleans up leftover epub stuff
	</description>
	<!-- 
	If OEBPS exists we assume the other files and directories do as well
	since Docbook would never create only OEBPS
	
	The if tasks uses ant-contrib. See the section on Automating the process
	for more information and about what changes to make if you don't want to use 
	the task
	-->
	<if>
		<available file="OEBPS" type="dir" />
		<then>
			<echo message="Directory exist... deleting" />
			<delete verbose="true">
				<fileset dir="OEBPS" includes="*"/>
				<fileset dir="META-INF" includes="*"/>
			</delete>
			<delete verbose="true" file="mimetype"/>
			<delete verbose="true" dir="META-INF"/>
			<delete verbose="true" dir="OEBPS"/>
			<delete verbose="true" file="${src_file}.epub"/>
		</then>
		<else>
			<echo message="Directory DOES NOT exist... skipping" />
		</else>
	</if>
</target>

<!-- We call xmllint to make sure that the XML validates-->
<target name="validate-xml">
	<exec executable="xmllint">
		<arg line="-noent -noout ${src_file}.xml"/>
	</exec>
</target>
</project>