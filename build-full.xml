<project name="docbook" default="docbook-single" basedir=".">
<description>
	Apache ant build file for Docbook based ebooks
</description>
<!-- Created by Carlos Araya as part of his eBook research -->

<!-- Required for the IF and SWITCH Task -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<!-- Experimental Support for Marcodef to make init and html build targets more modular -->
<macrodef name="init">
	<attribute name="dest" default="html_content"/>
	<sequential>
		<if>
			<available file="@{dest}" type="dir" />
			<then>
				<echo message="Directory @{dest} exist... skiping" />
			</then>
			<else>
				<echo>Creating directory</echo>
				<mkdir dir="@{dest}/"/>
				<echo>Creating CSS directory</echo>
				<mkdir dir="@{dest}/css"/>
				<echo>Creating JS directory</echo>
				<mkdir dir="@{dest}/js"/>
				<echo>Creating image directory</echo>
				<mkdir dir="@{dest}/images"/>
				<mkdir dir="@{dest}/images/callouts"/>
			</else>
		</if>
		<!-- 
			Copy CSS, JS and any images into their directories 
		-->
		<copy todir="@{dest}/css">
			<fileset dir="css" casesensitive="yes">
			  <include name="*.css"/>
			</fileset>
		</copy>
		<copy todir="@{dest}/js">
			<fileset dir="js" casesensitive="yes">
			  <include name="*.js"/>
			</fileset>
		</copy>
		<copy todir="@{dest}/images">
			<fileset dir="images" casesensitive="yes">
  			  <include name="*.png"/>
			  <include name="callouts/*.png"/>
			</fileset>
		</copy>
		<copy todir="@{dest}/images/callouts">
			<fileset dir="images" casesensitive="yes">
			  <include name="callouts/*.png"/>
			</fileset>
		</copy>
	</sequential>
</macrodef>

<!-- Change the value of src_file to the name of your ebook file -->
<property name="src_file" value="docbook-howto"/>

<!-- 
	Change the properties below to the full path of the respective 
	tools on your system. 
	
	This should work on Windows, Mac and Linux since Ant is
	crossplatform... I hope
-->
<property name="saxon_bin" value="/usr/local/java/saxon.jar"/>
<property name="fop_bin" value="/usr/local/java/fop/fop"/>
<property name="epubcheck_bin" value="/usr/local/java/epubcheck/epubcheck-3.0b5.jar"/>
<property name="kindlegen_bin" value="/usr/local/kindlegen/kindlegen"/>
<property name="xsltproc_bin" value="/usr/bin/xsltproc"/>
<property name="xmllint_bin" value="/usr/bin/xmllint"/>


<!-- Path to stylesheets -->
<property name="xslt1_xhtml" value="/usr/local/docbook/1.0/xslt/xhtml/"/>
<property name="xslt2_xhtml" value="/usr/local/docbook/2.0/release/2.0.3/xslt/base/html/"/>

<!-- 
As long as these match the values we setup for init we'll be fine... 
it bugs me having to do this but I'm still waiting to hear if I can do it 
the way I want to
-->
<property name="html_dest1" value="html_content"/>
<property name="html_dest2" value="html_content2"/>
<property name="docbook_path" value="../docbook/"/>
<property name="ebook_custom" value="carlos-chunk.xsl"/>
<property name="html_custom" value="html-custom.xsl"/>

<!-- 
	Docbook-single and docbook-chunks use the standard 
	XSLT stylesheets available from Sourceforge
-->

<target name="docbook-single">
	<init dest="html_content"/>
	<echo>Generating HTML Chunks with XSLT 1.0 processor</echo>
	<exec executable="${xsltproc_bin}">
		<arg line="-o content.html ${html_custom} ${src_file}.xml"/>
  	</exec>
	<echo>Moving html files to ${html_dest1}</echo>
	<move todir="${html_dest1}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</move>
</target>

<target name="docbook-chunks">
	<init dest="html_content"/>
	<echo>Generating HTML Chunks with xslt 1.0 processor</echo>
	<exec executable="${xsltproc_bin}">
		<arg line="${html_custom} ${src_file}.xml"/>
  	</exec>
	<echo>Moving html files to ${html_dest1}</echo>
	<move todir="${html_dest1}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</move>
</target>

<target name="docbook-single2">
	<init dest="html2_content"/>
	<echo>validate XML before converting to Docbook</echo>
	<antcall target="validate-xml"/>
	<echo>Generating HTML Single File using Saxon and XSLT2.0</echo>
	<echo>Saxon 9 or another XSLT2 processor must be used</echo>
	<java jar="${saxon_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="-s:${src_file}.xml"/>
		<arg value="-xsl:${xslt2_xhtml}docbook.xsl"/>
		<arg value="-o:${src_file}-2.html"/>
	</java>
	<echo>Moving files to {dest_html2}</echo>
	<move todir="${html_dest2}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</move>
</target>

<target name="docbook-chunks2">
	<init dest="html2_content"/>
	<echo>validate XML before converting to Docbook</echo>
	<antcall target="validate-xml"/>
	<echo>Generating HTML chunks using Saxon and XSLT2.0</echo>
	<echo>Saxon 9 or another XSLT2 processor must be used</echo>
	<java jar="${saxon_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="-s:${src_file}.xml"/>
		<arg value="-xsl:${xslt2_xhtml}chunk.xsl"/>
	</java>
	<echo>Moving files to ${dest_html2}</echo>
	<copy todir="${html_dest2}">
		<fileset dir="." casesensitive="yes">
		  <include name="*.html"/>
		</fileset>
	</copy>
</target>

<target name="docbook-fo">
	<echo>Creating FO file</echo>
	<exec executable="${xsltproc_bin}">
		<arg line="-o ${src_file}.fo /usr/local/docbook/1.0/xslt/fo/docbook.xsl ${src_file}.xml"/>
  	</exec>
</target>

<target name="pdf-fop" depends="docbook-fo">
	<echo>Using fop at ${fop_bin}</echo>
	<exec executable="${fop_bin}">
		<arg line="${src_file}.fo ${src_file}.pdf"/>
	</exec>
</target>

<target name="epub2">
	<!-- Remove prior versions of the content we're generating -->
	<antcall target="epub-clean"/>
	<!-- Validate XML -->
	<antcall target="validate-xml"/>
	<!-- Run the stylesheet conversion -->
	<exec executable="${xsltproc_bin}">
		<arg line="${docbook_path}epub/docbook.xsl ${src_file}.xml"/>
	</exec>
	<!-- Copy media resources -->
	<antcall target="copy-images"/>
	<!-- Create mimetype file, required per epub spec -->
	<antcall target="make-mime"/>
	<!-- zips the fills for the epub -->
	<antcall target="epub-zip"/>
	<!-- Runs epubcheck on the epub file -->
	<antcall target="epub-check"/>
	<!-- Creates a Kindle version of the book -->
	<antcall target="make-kindle"/>
</target>

<target name="epub3">
	<!-- Remove prior versions of the content we're generating -->
	<antcall target="epub-clean"/>
	<!-- Validate XML -->
	<antcall target="validate-xml"/>
	<!-- Run the xslt transformation... we should be able to use the XSLT ant 
	task but xsltproc is faster -->
	<exec executable="${xsltproc_bin}">
		<arg line="--stringparam base.dir OEBPS/ carlos-chunk.xsl ${src_file}.xml"/>
	</exec>
	<!-- Copy css stylesheet -->
	<antcall target="copy-resources"/>
	<!-- zips the fils for the epub -->
	<antcall target="epub-zip"/>
	<!-- Runs epubcheck on the epub file -->
	<antcall target="epub-check"/>
</target>

<!-- Utility targets called from elsewhere epub2 and/or epub3 targets-->
<target name="make-mime">
<!-- Creates mimetype file as required by epub spec-->
<echo file="mimetype">application/epub+zip</echo>
</target>

<target name="make-kindle">
<exec executable="${kindlegen_bin}">
	<arg line="${src_file}.epub"/>
</exec>
</target>

<target name="epub-zip">
	<!-- We use exec zip because I can't figure out if the builtin zip task conforms to
	     what ePub expects -->
	<!-- Zip the mimetype first without compression as required-->
	<exec executable="zip">
		<arg line="-X0 ${src_file}.epub mimetype"/>
	</exec>
	<!-- Then zip the other files into the zip/epub archive -->
	<exec executable="zip">
		<arg line="-r -X9 ${src_file}.epub META-INF OEBPS"/>
	</exec>
</target>

<target name="epub-check">
	<java jar="${epubcheck_bin}" fork="true" failonerror="true" maxmemory="128m">
		<arg value="${src_file}.epub"/>
	</java>
</target>

<!-- We call xmllint to make sure that the XML validates-->
<target name="validate-xml">
	<exec executable="${xmllint_bin}" failonerror="true">
		<arg line="-noent -noout ${src_file}.xml"/>
	</exec>
</target>

<!-- Download the docbook snapshot. Ignore this target if you're working offline

     Do not delete the docbook.zip file. This will be compared with the remote file
     to determine if the file has to be downloaded or not
-->
<target name="get-xsl">
	<mkdir dir="docbook"/>
	<get 
		src="http://snapshots.docbook.org/docbook-xsl-ns-snapshot.zip" 
		dest="docbook.zip"  
		verbose="true" 
		usetimestamp="true"/>
	<unzip src="docbook.zip" dest="docbook"/>
	<move todir="docbook">
		<fileset dir="docbook/docbook-xsl-ns-snapshot">
			<include name="**/*"/>
		</fileset>
	</move>
	<delete dir="docbook/docbook-xsl-ns-snapshot"/>	
	<move todir="../docbook">
		<fileset dir="docbook">
			<include name="**/*"/>
		</fileset>
	</move>
	<delte dir="docbook"/>
</target>

<target name="copy-resources">
	<!-- Macro Task to copy resouces into OEBPS-->
	<antcall target="copy-css"/>
	<antcall target="copy-videos"/>
	<antcall target="copy-images"/>
	<antcall target="copy-fonts"/>
</target>

<target name="copy-videos">
	<if>
		<available file="video" type="dir"/>
		<then>
			<copy todir="OEBPS/video">
				<fileset dir="video/">
					<include name="*.mp4"/>
					<include name="*.png"/>
					<include name="*.jpg"/>
				</fileset>
			</copy>
		</then>
		<else>
			<echo message="No videos to copy"/>
		</else>
	</if>
</target>

<target name="copy-images">
	<if>
		<available file="images" type="dir"/>
		<then>
			<copy todir="OEBPS/images">
				<fileset dir="images" casesensitive="yes">
				  <include name="**/*"/>
				</fileset>
			</copy>
		</then>
		<else>
			<echo message="no images to copy"/>
		</else>
	</if>
</target>

<target name="copy-fonts">
	<if>
		<!-- Check if the type directory exists-->
		<available file="type" type="dir" />
		<then>
			<!-- If it is then do this:
		
				1. Make the OEBPS type directory
				2. copy all fonts except those starting with Calluna 
			       to the OEBPS/type directory -->
			<echo message="Directory exist... copying font files" />
			<mkdir dir="OEBPS/type"/>
			 <copy todir="OEBPS/type">
			    <fileset dir="type/">
			      <exclude name="Calluna*.*"/>
			    </fileset>
			  </copy>
		</then>
		<else>
			<!-- There are no fonts... tough luck buddy -->
			<echo message="There are no fonts available" />
		</else>
	</if>	
</target>

<target name="copy-css">
	<if>
		<available file="css" type="dir"/>
		<then>
			<copy todir="OEBPS">
				<fileset dir="css" casesensitive="yes">
				  <include name="*.css"/>
				</fileset>
			</copy>
		</then>
		<else>
			<echo message="no style sheet to copy"/>
		</else>
	</if>
</target>

<target name="clean-all">
	<antcall target="html-clean"/>
	<antcall target="html2-clean"/>
	<antcall target="fo-clean"/>
	<antcall target="pdf-clean"/>
	<antcall target="epub-clean"/>
	<echo>Done deleting files!</echo>
</target>


<target name="html-clean">
	<!-- 
		Cleans up HTML leftovers 
	-->
	<delete verbose="true">
		<fileset dir="${html_dest1}" includes="**/*"/>
	</delete> 	
	<delete dir="${html_dest1}"/>
</target>

<target name="html2-clean">
	<!-- 
		Cleans up HTML leftovers 
	-->
	<delete verbose="true">
		<fileset dir="${html_dest2}" includes="**/*"/>
	</delete> 
	<delete dir="${dest_html2}"/>
</target>

<target name="fo-clean">
	<!-- 
		Removes the .fo file leftover from creating the PDF version
	-->
	<delete verbose="true">
		<fileset dir="." includes="*.fo"/>
	</delete> 
</target>

<target name="pdf-clean">
	<!-- 
		Removes the .pdf file
	-->
	<delete verbose="true">
		<fileset dir="." includes="*.pdf"/>
	</delete> 
</target>

<!-- Cleans up leftover epub stuff-->
<target name="epub-clean">
	<!-- 
	If OEBPS exists we assume the other files and directories 
	do as well.
	There is one instance where only the OEBPS directory is 
	created and that is if we have a syntax error from xmllint. 
	It's not frequent enough and the  solution is to delete OEBPS 
	manually.

	we use the if task from ant-contrib available from 
	sourceforge.net. 
	-->
	<if>
		<available file="OEBPS" type="dir" />
		<then>
			<echo message="Directory exist... deleting" />
			<delete verbose="true">
				<fileset dir="OEBPS" includes="*"/>
				<fileset dir="META-INF" includes="*"/>
			</delete>
			<delete verbose="true" file="mimetype"/>
			<delete verbose="true" dir="META-INF"/>
			<delete verbose="true" dir="OEBPS"/>
			<delete verbose="true" file="${src_file}.epub"/>
		</then>
		<else>
			<echo message="Nothing to delete" />
		</else>
	</if>
</target>


</project>